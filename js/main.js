var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Gravity_1, Thermodynamics_1;
import ECS, { Component, System } from "./ecs.js";
const World = new ECS();
let Transform = class Transform extends Component {
    constructor(x, y) {
        super();
        this.position = [0, 0];
        this.rotation = 0;
        this.scale = 1;
        this.position = [x, y];
    }
};
Transform = __decorate([
    World.register.component(),
    __metadata("design:paramtypes", [Number, Number])
], Transform);
let Motion = class Motion extends Component {
    constructor(mass) {
        super();
        this.velocity = [0, 0];
        this.acceleration = [0, 0];
        this.mass = mass;
    }
};
Motion = __decorate([
    World.register.component(),
    __metadata("design:paramtypes", [Number])
], Motion);
let Temperature = class Temperature extends Component {
    constructor(value) {
        super();
        this.value = value;
    }
};
Temperature = __decorate([
    World.register.component(),
    __metadata("design:paramtypes", [Number])
], Temperature);
let Movement = class Movement extends System {
    update(entities) {
        entities.forEach((transform, motion) => {
            let [x, y] = transform.position;
            let [vx, vy] = motion.velocity;
            let [ax, ay] = motion.acceleration;
            motion.velocity = [vx + ax, vy + ay];
            motion.acceleration = [0, 0];
            transform.position = [x + vx, y + vy];
        }, Transform, Motion);
    }
};
Movement = __decorate([
    World.register.system()
], Movement);
let Gravity = Gravity_1 = class Gravity extends System {
    constructor(acceleration) {
        super();
        this.acceleration = acceleration;
    }
    update(entities) {
        entities.forEach(motion => {
            let [x, y] = motion.acceleration;
            motion.acceleration = [x, y - this.acceleration];
        }, Motion);
    }
};
Gravity = Gravity_1 = __decorate([
    World.register.system({ before: [Movement] }, 9.8),
    __metadata("design:paramtypes", [Number])
], Gravity);
let Thermodynamics = Thermodynamics_1 = class Thermodynamics extends System {
    update(entities) {
        let es = [...entities.with(Motion, Transform, Temperature)];
        for (let i = es.length - 1; i >= 0; i--) {
            let [transform1, temperature1] = [es[i].get(Transform), es[i].get(Temperature)];
            for (let j = i - 1; j >= 0; j--) {
                let [transform2, temperature2] = [es[j].get(Transform), es[j].get(Temperature)];
                let [dx, dy] = [transform2.position[0] - transform1.position[0], transform2.position[1] - transform1.position[1]];
                let d2 = dx * dx + dy * dy;
                let f = 1 / d2;
                temperature1.value += (temperature2.value - temperature1.value) * f;
                temperature2.value += (temperature1.value - temperature2.value) * f;
            }
        }
    }
};
Thermodynamics = Thermodynamics_1 = __decorate([
    World.register.system({ after: [Movement] })
], Thermodynamics);
World.entities.create(new Transform(0, 0), new Motion(60), new Temperature(90));
World.entities.create(new Transform(10, 0), new Motion(60), new Temperature(40));
console.log(...World.systems);
console.log();
for (let i = 0; i < 5; i++) {
    if (i != 0)
        World.step();
    console.log([...World.entities.with(Temperature)].map(e => `${e.get(Temperature).value}`));
}
//# sourceMappingURL=data:application/json;base64,