import "electron";
import Noise from "../core/noise.js";
export default class PageContent {
    /** Content at the url */
    value;
    page;
    url;
    static recent = [];
    static allowed = true;
    constructor(url, content) {
        this.value = content;
        this.url = new URL(url);
        this.page = new DOMParser().parseFromString(content, "text/html");
        //Set base url
        let base = this.page.createElement("base");
        base.href = `${this.url.origin}/`;
        this.rootElement.append(base);
    }
    /** Root element on the page */
    get rootElement() {
        return this.page.documentElement;
    }
    /**
     * @param pattern Regex pattern
     */
    find(pattern) {
        return this.value.match(new RegExp(pattern, "g"));
    }
    querySelector(query) {
        return this.page.querySelector(query);
    }
    querySelectorAll(query) {
        return this.page.querySelectorAll(query);
    }
    xpath(path) {
        return this.page.evaluate(path, this.page, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
    }
    /**
     * @param url Url to acquire content from
     * @returns Cached PageContent at the URL
     */
    static async fetch(url) {
        let settings = await Noise.getSettings();
        let time = Date.now();
        for (let i = PageContent.recent.length - 1; i >= 0; i--)
            if (PageContent.recent[i] < time - settings.fetching.recency) {
                PageContent.recent.splice(0, i + 1);
                break;
            }
        PageContent.recent.push(time);
        if (PageContent.recent.length > settings.fetching.thresholdAbort) {
            PageContent.allowed = false;
            console.error("Recency threshold reached, content fetching disabled. Refresh window with 'f5' or 'ctrl+r'.");
        }
        if (!PageContent.allowed)
            return Promise.reject("Accumulation disabled");
        if (PageContent.recent.length > settings.fetching.thresholdWait) {
            await new Promise(r => setTimeout(() => r(), settings.fetching.recency));
            if (PageContent.recent.length > 0 && PageContent.recent[PageContent.recent.length - 1] == time)
                PageContent.recent.push(Date.now());
            else
                return Promise.reject(`Ignored content fetch for '${url}'`);
        }
        if (!PageContent.allowed)
            return Promise.reject("Accumulation disabled");
        let view = document.createElement("webview");
        view.classList.add("pageContentSource");
        let result = new Promise((resolve, reject) => {
            view.addEventListener("dom-ready", async (e) => {
                let view = e.target;
                view.setAudioMuted(true);
                try {
                    await view.loadURL(url);
                    let result = await view.executeJavaScript("document.documentElement.innerHTML");
                    view.remove();
                    resolve(new PageContent(url, result));
                }
                catch (e) {
                    console.error(`Unable to acquire page content for "${url}" due to:\n\n${e}`);
                    reject(e);
                }
            }, { once: true });
        });
        view.src = "about:blank";
        document.body.append(view);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZUNvbnRlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvcGFnZUNvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBeUIsVUFBVSxDQUFBO0FBQ25DLE9BQU8sS0FBSyxNQUFNLGtCQUFrQixDQUFBO0FBRXBDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sV0FBVztJQUMvQix5QkFBeUI7SUFDVCxLQUFLLENBQVE7SUFDWixJQUFJLENBQVU7SUFDZCxHQUFHLENBQUs7SUFFakIsTUFBTSxDQUFDLE1BQU0sR0FBYSxFQUFFLENBQUE7SUFDNUIsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUE7SUFFN0IsWUFBb0IsR0FBVyxFQUFFLE9BQWU7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUE7UUFDcEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUVqRSxjQUFjO1FBQ2QsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDMUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUE7UUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDOUIsQ0FBQztJQUVELCtCQUErQjtJQUMvQixJQUFXLFdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQTtJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxJQUFJLENBQUMsT0FBZTtRQUMxQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksTUFB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LElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFDLENBQUMsRUFBQyxFQUFFO2dCQUM1QyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsTUFBb0IsQ0FBQTtnQkFDakMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFFeEIsSUFBSTtvQkFDSCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7b0JBRXZCLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLG9DQUFvQyxDQUFXLENBQUE7b0JBRXpGLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtvQkFFYixPQUFPLENBQUMsSUFBSSxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7aUJBQ3JDO2dCQUFDLE9BQU0sQ0FBQyxFQUFFO29CQUNWLE9BQU8sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUE7b0JBQzVFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtpQkFDVDtZQUNGLENBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQVEsQ0FBQyxDQUFBO1FBQ3hCLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUE7UUFDeEIsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFMUIsT0FBTyxNQUFNLENBQUE7SUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtXZWJ2aWV3VGFnfSBmcm9tIFwiZWxlY3Ryb25cIlxyXG5pbXBvcnQgTm9pc2UgZnJvbSBcIi4uL2NvcmUvbm9pc2UuanNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFnZUNvbnRlbnQge1xyXG5cdC8qKiBDb250ZW50IGF0IHRoZSB1cmwgKi9cclxuXHRwdWJsaWMgcmVhZG9ubHkgdmFsdWU6IHN0cmluZ1xyXG5cdHByaXZhdGUgcmVhZG9ubHkgcGFnZTogRG9jdW1lbnRcclxuXHRwcml2YXRlIHJlYWRvbmx5IHVybDogVVJMXHJcblxyXG5cdHByaXZhdGUgc3RhdGljIHJlY2VudDogbnVtYmVyW10gPSBbXVxyXG5cdHByaXZhdGUgc3RhdGljIGFsbG93ZWQgPSB0cnVlXHJcblxyXG5cdHByaXZhdGUgY29uc3RydWN0b3IodXJsOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykge1xyXG5cdFx0dGhpcy52YWx1ZSA9IGNvbnRlbnRcclxuXHRcdHRoaXMudXJsID0gbmV3IFVSTCh1cmwpXHJcblx0XHR0aGlzLnBhZ2UgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGNvbnRlbnQsIFwidGV4dC9odG1sXCIpXHJcblxyXG5cdFx0Ly9TZXQgYmFzZSB1cmxcclxuXHRcdGxldCBiYXNlID0gdGhpcy5wYWdlLmNyZWF0ZUVsZW1lbnQoXCJiYXNlXCIpXHJcblx0XHRiYXNlLmhyZWYgPSBgJHt0aGlzLnVybC5vcmlnaW59L2BcclxuXHRcdHRoaXMucm9vdEVsZW1lbnQuYXBwZW5kKGJhc2UpXHJcblx0fVxyXG5cclxuXHQvKiogUm9vdCBlbGVtZW50IG9uIHRoZSBwYWdlICovXHJcblx0cHVibGljIGdldCByb290RWxlbWVudCgpOiBFbGVtZW50IHtcclxuXHRcdHJldHVybiB0aGlzLnBhZ2UuZG9jdW1lbnRFbGVtZW50XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcGFyYW0gcGF0dGVybiBSZWdleCBwYXR0ZXJuXHJcblx0ICovXHJcblx0cHVibGljIGZpbmQocGF0dGVybjogc3RyaW5nKSB7XHJcblx0XHRyZXR1cm4gdGhpcy52YWx1ZS5tYXRjaChuZXcgUmVnRXhwKHBhdHRlcm4sIFwiZ1wiKSlcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBxdWVyeVNlbGVjdG9yKHF1ZXJ5OiBzdHJpbmcpOiBFbGVtZW50IHtcclxuXHRcdHJldHVybiB0aGlzLnBhZ2UucXVlcnlTZWxlY3RvcihxdWVyeSlcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBxdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5OiBzdHJpbmcpOiBOb2RlTGlzdE9mPEVsZW1lbnQ+IHtcclxuXHRcdHJldHVybiB0aGlzLnBhZ2UucXVlcnlTZWxlY3RvckFsbChxdWVyeSlcclxuXHR9XHJcblxyXG5cdHB1YmxpYyB4cGF0aChwYXRoOiBzdHJpbmcpOiBOb2RlIHtcclxuXHRcdHJldHVybiB0aGlzLnBhZ2UuZXZhbHVhdGUoXHJcblx0XHRcdHBhdGgsXHJcblx0XHRcdHRoaXMucGFnZSxcclxuXHRcdFx0bnVsbCxcclxuXHRcdFx0WFBhdGhSZXN1bHQuRklSU1RfT1JERVJFRF9OT0RFX1RZUEUsXHJcblx0XHRcdG51bGxcclxuXHRcdCkuc2luZ2xlTm9kZVZhbHVlXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcGFyYW0gdXJsIFVybCB0byBhY3F1aXJlIGNvbnRlbnQgZnJvbVxyXG5cdCAqIEByZXR1cm5zIENhY2hlZCBQYWdlQ29udGVudCBhdCB0aGUgVVJMXHJcblx0ICovXHJcblx0cHVibGljIHN0YXRpYyBhc3luYyBmZXRjaCh1cmw6IHN0cmluZyk6IFByb21pc2U8UGFnZUNvbnRlbnQ+IHtcclxuXHRcdGxldCBzZXR0aW5ncyA9IGF3YWl0IE5vaXNlLmdldFNldHRpbmdzKClcclxuXHRcdGxldCB0aW1lID0gRGF0ZS5ub3coKVxyXG5cclxuXHRcdGZvcihsZXQgaSA9IFBhZ2VDb250ZW50LnJlY2VudC5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcclxuXHRcdFx0aWYoUGFnZUNvbnRlbnQucmVjZW50W2ldIDwgdGltZSAtIHNldHRpbmdzLmZldGNoaW5nLnJlY2VuY3kpIHtcclxuXHRcdFx0XHRQYWdlQ29udGVudC5yZWNlbnQuc3BsaWNlKDAsIGkgKyAxKVxyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRcdH1cclxuXHJcblx0XHRQYWdlQ29udGVudC5yZWNlbnQucHVzaCh0aW1lKVxyXG5cclxuXHRcdGlmKFBhZ2VDb250ZW50LnJlY2VudC5sZW5ndGggPiBzZXR0aW5ncy5mZXRjaGluZy50aHJlc2hvbGRBYm9ydCkge1xyXG5cdFx0XHRQYWdlQ29udGVudC5hbGxvd2VkID0gZmFsc2VcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIlJlY2VuY3kgdGhyZXNob2xkIHJlYWNoZWQsIGNvbnRlbnQgZmV0Y2hpbmcgZGlzYWJsZWQuIFJlZnJlc2ggd2luZG93IHdpdGggJ2Y1JyBvciAnY3RybCtyJy5cIilcclxuXHRcdH1cclxuXHJcblx0XHRpZighUGFnZUNvbnRlbnQuYWxsb3dlZClcclxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFwiQWNjdW11bGF0aW9uIGRpc2FibGVkXCIpXHJcblxyXG5cdFx0aWYoUGFnZUNvbnRlbnQucmVjZW50Lmxlbmd0aCA+IHNldHRpbmdzLmZldGNoaW5nLnRocmVzaG9sZFdhaXQpIHtcclxuXHRcdFx0YXdhaXQgbmV3IFByb21pc2U8dm9pZD4ociA9PiBzZXRUaW1lb3V0KCgpID0+IHIoKSwgc2V0dGluZ3MuZmV0Y2hpbmcucmVjZW5jeSkpXHJcblxyXG5cdFx0XHRpZihQYWdlQ29udGVudC5yZWNlbnQubGVuZ3RoID4gMCAmJiBQYWdlQ29udGVudC5yZWNlbnRbUGFnZUNvbnRlbnQucmVjZW50Lmxlbmd0aCAtIDFdID09IHRpbWUpXHJcblx0XHRcdFx0UGFnZUNvbnRlbnQucmVjZW50LnB1c2goRGF0ZS5ub3coKSlcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChgSWdub3JlZCBjb250ZW50IGZldGNoIGZvciAnJHt1cmx9J2ApXHJcblx0XHR9XHJcblxyXG5cdFx0aWYoIVBhZ2VDb250ZW50LmFsbG93ZWQpXHJcblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChcIkFjY3VtdWxhdGlvbiBkaXNhYmxlZFwiKVxyXG5cclxuXHRcdGxldCB2aWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIndlYnZpZXdcIilcclxuXHRcdHZpZXcuY2xhc3NMaXN0LmFkZChcInBhZ2VDb250ZW50U291cmNlXCIpXHJcblxyXG5cdFx0bGV0IHJlc3VsdCA9IG5ldyBQcm9taXNlPFBhZ2VDb250ZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHZpZXcuYWRkRXZlbnRMaXN0ZW5lcihcImRvbS1yZWFkeVwiLCBhc3luYyBlID0+IHtcclxuXHRcdFx0XHRsZXQgdmlldyA9IGUudGFyZ2V0IGFzIFdlYnZpZXdUYWdcclxuXHRcdFx0XHR2aWV3LnNldEF1ZGlvTXV0ZWQodHJ1ZSlcclxuXHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdGF3YWl0IHZpZXcubG9hZFVSTCh1cmwpXHJcblxyXG5cdFx0XHRcdFx0bGV0IHJlc3VsdCA9IGF3YWl0IHZpZXcuZXhlY3V0ZUphdmFTY3JpcHQoXCJkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MXCIpIGFzIHN0cmluZ1xyXG5cclxuXHRcdFx0XHRcdHZpZXcucmVtb3ZlKClcclxuXHJcblx0XHRcdFx0XHRyZXNvbHZlKG5ldyBQYWdlQ29udGVudCh1cmwsIHJlc3VsdCkpXHJcblx0XHRcdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGBVbmFibGUgdG8gYWNxdWlyZSBwYWdlIGNvbnRlbnQgZm9yIFwiJHt1cmx9XCIgZHVlIHRvOlxcblxcbiR7ZX1gKVxyXG5cdFx0XHRcdFx0cmVqZWN0KGUpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB7b25jZTogdHJ1ZX0gYXMgYW55KVxyXG5cdFx0fSlcclxuXHJcblx0XHR2aWV3LnNyYyA9IFwiYWJvdXQ6YmxhbmtcIlxyXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmQodmlldylcclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0XHJcblx0fVxyXG59Il19