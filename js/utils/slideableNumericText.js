export default class SlideableNumericText {
    text;
    slider;
    lastValue;
    constructor({ text, slider }, listener) {
        this.text = text;
        this.slider = slider;
        this.lastValue = this.value;
        text.onchange = slider.oninput = (event) => {
            let value = event.target.valueAsNumber;
            let result = listener?.(this.lastValue, value);
            if (result === undefined)
                this.value = value;
            else {
                event.preventDefault();
                this.value = result;
            }
        };
    }
    get value() {
        return this.text.valueAsNumber;
    }
    set value(value) {
        let precision = Math.log10(Math.max(0, Math.ceil(1 / Math.min(parseFloat(this.text.step), parseFloat(this.slider.step)))));
        value = parseFloat(value.toFixed(precision));
        this.text.valueAsNumber = value;
        this.slider.valueAsNumber = value;
        this.lastValue = value;
    }
    get max() {
        return parseFloat(this.text.max);
    }
    set max(value) {
        this.text.max = value.toString();
        this.slider.max = value.toString();
    }
    get min() {
        return parseFloat(this.text.min);
    }
    set min(value) {
        this.text.min = value.toString();
        this.slider.min = value.toString();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVhYmxlTnVtZXJpY1RleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvc2xpZGVhYmxlTnVtZXJpY1RleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE9BQU8sT0FBTyxvQkFBb0I7SUFDeEIsSUFBSSxDQUFrQjtJQUN0QixNQUFNLENBQWtCO0lBQ2hDLFNBQVMsQ0FBUTtJQUV6QixZQUFtQixFQUFDLElBQUksRUFBRSxNQUFNLEVBQXFELEVBQUUsUUFBbUI7UUFDekcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBRTNCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1lBQ2pELElBQUksS0FBSyxHQUFJLEtBQUssQ0FBQyxNQUEyQixDQUFDLGFBQWEsQ0FBQTtZQUU1RCxJQUFJLE1BQU0sR0FBRyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFBO1lBRTlDLElBQUcsTUFBTSxLQUFLLFNBQVM7Z0JBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO2lCQUNkO2dCQUNKLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQTtnQkFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFnQixDQUFBO2FBQzdCO1FBQ0YsQ0FBQyxDQUFBO0lBQ0YsQ0FBQztJQUVELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUE7SUFDL0IsQ0FBQztJQUVELElBQVcsS0FBSyxDQUFDLEtBQWE7UUFDN0IsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDMUgsS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFFNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFBO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQTtRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQTtJQUN2QixDQUFDO0lBRUQsSUFBVyxHQUFHO1FBQ2IsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNqQyxDQUFDO0lBRUQsSUFBVyxHQUFHLENBQUMsS0FBYTtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ25DLENBQUM7SUFFRCxJQUFXLEdBQUc7UUFDYixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2pDLENBQUM7SUFFRCxJQUFXLEdBQUcsQ0FBQyxLQUFhO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQTtRQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDbkMsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBDYWxsYmFjayA9IChvbGRWYWx1ZTogbnVtYmVyLCBuZXdWYWx1ZTogbnVtYmVyKSA9PiBudW1iZXIgfCB2b2lkXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlYWJsZU51bWVyaWNUZXh0IHtcblx0cHVibGljIHJlYWRvbmx5IHRleHQ6IEhUTUxJbnB1dEVsZW1lbnRcblx0cHVibGljIHJlYWRvbmx5IHNsaWRlcjogSFRNTElucHV0RWxlbWVudFxuXHRwcml2YXRlIGxhc3RWYWx1ZTogbnVtYmVyXG5cblx0cHVibGljIGNvbnN0cnVjdG9yKHt0ZXh0LCBzbGlkZXJ9OiB7dGV4dDogSFRNTElucHV0RWxlbWVudCwgc2xpZGVyOiBIVE1MSW5wdXRFbGVtZW50fSwgbGlzdGVuZXI/OiBDYWxsYmFjaykge1xuXHRcdHRoaXMudGV4dCA9IHRleHRcblx0XHR0aGlzLnNsaWRlciA9IHNsaWRlclxuXHRcdHRoaXMubGFzdFZhbHVlID0gdGhpcy52YWx1ZVxuXG5cdFx0dGV4dC5vbmNoYW5nZSA9IHNsaWRlci5vbmlucHV0ID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuXHRcdFx0bGV0IHZhbHVlID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZUFzTnVtYmVyXG5cdFx0XHRcblx0XHRcdGxldCByZXN1bHQgPSBsaXN0ZW5lcj8uKHRoaXMubGFzdFZhbHVlLCB2YWx1ZSlcblxuXHRcdFx0aWYocmVzdWx0ID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWx1ZVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHJlc3VsdCBhcyBudW1iZXJcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHZhbHVlKCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIHRoaXMudGV4dC52YWx1ZUFzTnVtYmVyXG5cdH1cblxuXHRwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcblx0XHRsZXQgcHJlY2lzaW9uID0gTWF0aC5sb2cxMChNYXRoLm1heCgwLCBNYXRoLmNlaWwoMSAvIE1hdGgubWluKHBhcnNlRmxvYXQodGhpcy50ZXh0LnN0ZXApLCBwYXJzZUZsb2F0KHRoaXMuc2xpZGVyLnN0ZXApKSkpKVxuXHRcdHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZS50b0ZpeGVkKHByZWNpc2lvbikpXG5cblx0XHR0aGlzLnRleHQudmFsdWVBc051bWJlciA9IHZhbHVlXG5cdFx0dGhpcy5zbGlkZXIudmFsdWVBc051bWJlciA9IHZhbHVlXG5cdFx0dGhpcy5sYXN0VmFsdWUgPSB2YWx1ZVxuXHR9XG5cblx0cHVibGljIGdldCBtYXgoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh0aGlzLnRleHQubWF4KVxuXHR9XG5cblx0cHVibGljIHNldCBtYXgodmFsdWU6IG51bWJlcikge1xuXHRcdHRoaXMudGV4dC5tYXggPSB2YWx1ZS50b1N0cmluZygpXG5cdFx0dGhpcy5zbGlkZXIubWF4ID0gdmFsdWUudG9TdHJpbmcoKVxuXHR9XG5cblx0cHVibGljIGdldCBtaW4oKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gcGFyc2VGbG9hdCh0aGlzLnRleHQubWluKVxuXHR9XG5cblx0cHVibGljIHNldCBtaW4odmFsdWU6IG51bWJlcikge1xuXHRcdHRoaXMudGV4dC5taW4gPSB2YWx1ZS50b1N0cmluZygpXG5cdFx0dGhpcy5zbGlkZXIubWluID0gdmFsdWUudG9TdHJpbmcoKVxuXHR9XG59Il19