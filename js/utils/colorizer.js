/**
 * Converts a color value from one CSS format to another
 * @param value Color value in original format
 * @param from Original format
 * @param to Target format
 * @returns Color value in target format
 */
export function convert(value, from, to) {
    let r, g, b;
    switch (from) {
        case "hex":
            [r, g, b] = value
                .match(/#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])/)
                .slice(1)
                .map(v => parseInt(`0x${v}`));
            break;
        case "hsl": {
            let sep = value.indexOf(",") > -1 ? "," : " ";
            let v = value.substr(4).split(")")[0].split(sep);
            let h = parseFloat(v[0]);
            let s = parseFloat(v[1].slice(0, -1)) / 100;
            let l = parseFloat(v[2].slice(0, -1)) / 100;
            let c = (1 - Math.abs(2 * l - 1)) * s;
            let x = c * (1 - Math.abs((h / 60) % 2 - 1));
            let m = l - c / 2;
            if (0 <= h && h < 60)
                [r, g, b] = [c, x, 0];
            else if (60 <= h && h < 120)
                [r, g, b] = [x, c, 0];
            else if (120 <= h && h < 180)
                [r, g, b] = [0, c, x];
            else if (180 <= h && h < 240)
                [r, g, b] = [0, x, c];
            else if (240 <= h && h < 300)
                [r, g, b] = [x, 0, c];
            else if (300 <= h && h < 360)
                [r, g, b] = [c, 0, x];
            r = Math.round((r + m) * 255);
            g = Math.round((g + m) * 255);
            b = Math.round((b + m) * 255);
            break;
        }
        case "rgb":
            [r, g, b] = value
                .match(/rgb\((\d+)\s+,\s+(\d+)\s+,\s+(\d+)\s+\)/)
                .slice(1)
                .map(v => parseInt(v));
            break;
        default:
            throw new Error(`Invalid color format '${from}'`);
    }
    switch (to) {
        case "hex":
            function toHex(i) {
                let v = i.toString(16);
                return v.length == 1 ? `0${v}` : v;
            }
            return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
        case "hsl": {
            r /= 255;
            g /= 255;
            b /= 255;
            let cmin = Math.min(r, g, b);
            let cmax = Math.max(r, g, b);
            let delta = cmax - cmin;
            let h, s, l;
            if (delta == 0)
                h = 0;
            else if (cmax == r)
                h = ((g - b) / delta) % 6;
            else if (cmax == g)
                h = (b - r) / delta + 2;
            else
                h = (r - g) / delta + 4;
            h = Math.round(h * 60);
            if (h < 0)
                h += 360;
            l = (cmax + cmin) / 2;
            s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
            return `hsl(${h}, ${+(s * 100).toFixed(1)}%, ${+(l * 100).toFixed(1)}%)`;
        }
        case "rgb":
            return `rgb(${r}, ${g}, ${b})`;
        default:
            throw new Error(`Invalid color format '${to}'`);
    }
}
export function* wheel(count, format = "hex") {
    count = Math.max(1, count);
    for (let i = 0; i < count; i++) {
        let color = `hsl(${i * (360 / count) % 360}, 100%, 50%)`;
        yield convert(color, "hsl", format);
    }
}
//# sourceMappingURL=data:application/json;base64,