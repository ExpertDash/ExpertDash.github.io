export default class Cookies {
    static get(key, type, defaultValue) {
        let cookies = new Map(this);
        if (!cookies.has(key))
            return defaultValue ?? null;
        let value = cookies.get(key);
        switch (type) {
            case Object:
                return JSON.parse(value);
            case String:
                return value;
            case Number:
                return parseFloat(value);
            case Boolean:
                switch (value) {
                    case "true":
                        return true;
                    case "false":
                        return false;
                    default:
                        return null;
                }
            default:
                throw new Error(`Unable to get value for '${key}' as '${type.name}'`);
        }
    }
    static set(key, value) {
        switch (typeof value) {
            case "object":
                document.cookie = `${key}=${JSON.stringify(value)}`;
                break;
            default:
                document.cookie = `${key}=${value}`;
                break;
        }
    }
    static has(key) {
        return [...this]
            .map(([key]) => key)
            .includes(key);
    }
    static delete(key) {
        Cookies.set(key, "; expires=Thu, 01 Jan 1970 00:00:01 GMT;");
    }
    static clear() {
        for (let [key] of this)
            Cookies.delete(key);
    }
    static *[Symbol.iterator]() {
        for (let entry of document.cookie.split(";")) {
            let [key, value] = entry.split("=");
            key = key.trim();
            yield [key, value];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9jb29raWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxPQUFPLE9BQU8sT0FBTztJQUNwQixNQUFNLENBQUMsR0FBRyxDQUFVLEdBQVcsRUFBRSxJQUFzQixFQUFFLFlBQWdCO1FBQy9FLElBQUksT0FBTyxHQUFHLElBQUksR0FBRyxDQUFpQixJQUFJLENBQUMsQ0FBQTtRQUUzQyxJQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDbkIsT0FBTyxZQUFZLElBQUksSUFBSSxDQUFBO1FBRTVCLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFNUIsUUFBTyxJQUFJLEVBQUU7WUFDWixLQUFLLE1BQU07Z0JBQ1YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3pCLEtBQUssTUFBTTtnQkFDVixPQUFPLEtBQVksQ0FBQTtZQUNwQixLQUFLLE1BQU07Z0JBQ1YsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFRLENBQUE7WUFDaEMsS0FBSyxPQUFPO2dCQUNYLFFBQU8sS0FBSyxFQUFFO29CQUNiLEtBQUssTUFBTTt3QkFDVixPQUFPLElBQVcsQ0FBQTtvQkFDbkIsS0FBSyxPQUFPO3dCQUNYLE9BQU8sS0FBWSxDQUFBO29CQUNwQjt3QkFDQyxPQUFPLElBQUksQ0FBQTtpQkFDWjtZQUNGO2dCQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLEdBQUcsU0FBUyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtTQUN0RTtJQUNGLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQ3hDLFFBQU8sT0FBTyxLQUFLLEVBQUU7WUFDcEIsS0FBSyxRQUFRO2dCQUNaLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFBO2dCQUNuRCxNQUFLO1lBQ047Z0JBQ0MsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQTtnQkFDbkMsTUFBSztTQUNOO0lBQ0YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBVztRQUM1QixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDbkIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2hCLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQVc7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsMENBQTBDLENBQUMsQ0FBQTtJQUM3RCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUs7UUFDbEIsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSTtZQUNwQixPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3JCLENBQUM7SUFFTSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDL0IsS0FBSSxJQUFJLEtBQUssSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDbkMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUVoQixNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1NBQ2xCO0lBQ0YsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsidHlwZSBDb25zdHJ1Y3RvcjxUPiA9ICguLi5hcmdzOiBhbnlbXSkgPT4gVFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb29raWVzIHtcblx0cHVibGljIHN0YXRpYyBnZXQ8VCA9IGFueT4oa2V5OiBzdHJpbmcsIHR5cGU6IENvbnN0cnVjdG9yPGFueT4sIGRlZmF1bHRWYWx1ZT86IFQpOiBUIHtcblx0XHRsZXQgY29va2llcyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KHRoaXMpXG5cblx0XHRpZighY29va2llcy5oYXMoa2V5KSlcblx0XHRcdHJldHVybiBkZWZhdWx0VmFsdWUgPz8gbnVsbFxuXG5cdFx0bGV0IHZhbHVlID0gY29va2llcy5nZXQoa2V5KVxuXG5cdFx0c3dpdGNoKHR5cGUpIHtcblx0XHRcdGNhc2UgT2JqZWN0OlxuXHRcdFx0XHRyZXR1cm4gSlNPTi5wYXJzZSh2YWx1ZSlcblx0XHRcdGNhc2UgU3RyaW5nOlxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgYXMgYW55XG5cdFx0XHRjYXNlIE51bWJlcjpcblx0XHRcdFx0cmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpIGFzIGFueVxuXHRcdFx0Y2FzZSBCb29sZWFuOlxuXHRcdFx0XHRzd2l0Y2godmFsdWUpIHtcblx0XHRcdFx0XHRjYXNlIFwidHJ1ZVwiOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWUgYXMgYW55XG5cdFx0XHRcdFx0Y2FzZSBcImZhbHNlXCI6XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2UgYXMgYW55XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHJldHVybiBudWxsXG5cdFx0XHRcdH1cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCB2YWx1ZSBmb3IgJyR7a2V5fScgYXMgJyR7dHlwZS5uYW1lfSdgKVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG5cdFx0c3dpdGNoKHR5cGVvZiB2YWx1ZSkge1xuXHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRkb2N1bWVudC5jb29raWUgPSBgJHtrZXl9PSR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWBcblx0XHRcdFx0YnJlYWtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGRvY3VtZW50LmNvb2tpZSA9IGAke2tleX09JHt2YWx1ZX1gXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXHR9XG5cblx0cHVibGljIHN0YXRpYyBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gWy4uLnRoaXNdXG5cdFx0XHQubWFwKChba2V5XSkgPT4ga2V5KVxuXHRcdFx0LmluY2x1ZGVzKGtleSlcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgZGVsZXRlKGtleTogc3RyaW5nKTogdm9pZCB7XG5cdFx0Q29va2llcy5zZXQoa2V5LCBcIjsgZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAxIEdNVDtcIilcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgY2xlYXIoKTogdm9pZCB7XG5cdFx0Zm9yKGxldCBba2V5XSBvZiB0aGlzKVxuXHRcdFx0Q29va2llcy5kZWxldGUoa2V5KVxuXHR9XG5cblx0cHVibGljIHN0YXRpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxbc3RyaW5nLCBzdHJpbmddPiB7XG5cdFx0Zm9yKGxldCBlbnRyeSBvZiBkb2N1bWVudC5jb29raWUuc3BsaXQoXCI7XCIpKSB7XG5cdFx0XHRsZXQgW2tleSwgdmFsdWVdID0gZW50cnkuc3BsaXQoXCI9XCIpXG5cdFx0XHRrZXkgPSBrZXkudHJpbSgpXG5cdFx0XHRcblx0XHRcdHlpZWxkIFtrZXksIHZhbHVlXVxuXHRcdH1cblx0fVxufSJdfQ==