import Geometry from "../math/geometry.js";
import Vector3 from "../math/vec3.js";
export default class BoundingBox {
    /**
     * @param vertices Vertices composing the mesh
     * @param transform Transformation to apply to the bounding box
     */
    constructor(vertices, transform) {
        let [xs, ys] = [vertices.map(v => v.x), vertices.map(v => v.y)];
        this.min = new Vector3(Math.min(...xs), Math.min(...ys));
        this.max = new Vector3(Math.max(...xs), Math.max(...ys));
        this.topLeft = new Vector3(this.min.x, this.max.y);
        this.topRight = new Vector3(this.max.x, this.max.y);
        this.bottomLeft = new Vector3(this.min.x, this.min.y);
        this.bottomRight = new Vector3(this.max.x, this.min.y);
        if (transform) {
            let matrix = transform.matrix;
            this.min = new Vector3(...matrix.mulVec(this.min.xyzw).slice(0, -1));
            this.max = new Vector3(...matrix.mulVec(this.max.xyzw).slice(0, -1));
            this.topLeft = new Vector3(...matrix.mulVec(this.topLeft.xyzw).slice(0, -1));
            this.topRight = new Vector3(...matrix.mulVec(this.topRight.xyzw).slice(0, -1));
            this.bottomLeft = new Vector3(...matrix.mulVec(this.bottomLeft.xyzw).slice(0, -1));
            this.bottomRight = new Vector3(...matrix.mulVec(this.bottomRight.xyzw).slice(0, -1));
        }
    }
    /**
     * Line segments composing the edges of the box
     */
    get edges() {
        return [
            [this.topLeft, this.topRight],
            [this.topRight, this.bottomRight],
            [this.bottomRight, this.bottomLeft],
            [this.bottomLeft, this.topLeft]
        ];
    }
    /**
     * @returns Whether the point is contained
     */
    inside(point) {
        return this.min.x <= point.x && point.x <= this.max.x &&
            this.min.y <= point.y && point.y <= this.max.y;
    }
    /**
     * @returns Whether the boxes collide
     */
    collides(other) {
        for (let edge of this.edges)
            for (let otherEdge of other.edges)
                if (Geometry.intersects(edge, otherEdge))
                    return true;
        return false;
    }
    toString() {
        return `{${this.topLeft}, ${this.topRight}, ${this.bottomLeft}, ${this.bottomRight}}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRpbmdCb3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGh5c2ljcy9ib3VuZGluZ0JveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFFBQVEsTUFBTSxxQkFBcUIsQ0FBQTtBQUMxQyxPQUFPLE9BQU8sTUFBTSxpQkFBaUIsQ0FBQTtBQUVyQyxNQUFNLENBQUMsT0FBTyxPQUFPLFdBQVc7SUFvQi9COzs7T0FHRztJQUNILFlBQW1CLFFBQW1CLEVBQUUsU0FBcUI7UUFDNUQsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQy9ELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFD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QkFDL0IsSUFBRyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUM7b0JBQ3RDLE9BQU8sSUFBSSxDQUFBO1FBRWQsT0FBTyxLQUFLLENBQUE7SUFDYixDQUFDO0lBRU0sUUFBUTtRQUNkLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUE7SUFDdEYsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRyYW5zZm9ybSBmcm9tIFwiLi4vY29tbW9uL2NvbXBvbmVudHMvdHJhbnNmb3JtLmpzXCJcclxuaW1wb3J0IEdlb21ldHJ5IGZyb20gXCIuLi9tYXRoL2dlb21ldHJ5LmpzXCJcclxuaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4uL21hdGgvdmVjMy5qc1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3VuZGluZ0JveCB7XHJcblx0LyoqIExvY2FsIG1pbmltdW0gY29ybmVyICovXHJcblx0cHVibGljIHJlYWRvbmx5IG1pbjogVmVjdG9yM1xyXG5cclxuXHQvKiogTG9jYWwgbWF4aW11bSBjb3JuZXIgKi9cclxuXHRwdWJsaWMgcmVhZG9ubHkgbWF4OiBWZWN0b3IzXHJcblxyXG5cdC8qKiBMb2NhbCB0b3AgbGVmdCBjb3JuZXIgKi9cclxuXHRwdWJsaWMgcmVhZG9ubHkgdG9wTGVmdDogVmVjdG9yM1xyXG5cclxuXHQvKiogTG9jYWwgdG9wIHJpZ2h0IGNvcm5lciAqL1xyXG5cdHB1YmxpYyByZWFkb25seSB0b3BSaWdodDogVmVjdG9yM1xyXG5cclxuXHQvKiogTG9jYWwgYm90dG9tIGxlZnQgY29ybmVyICovXHJcblx0cHVibGljIHJlYWRvbmx5IGJvdHRvbUxlZnQ6IFZlY3RvcjNcclxuXHJcblx0LyoqIExvY2FsIGJvdHRvbSByaWdodCBjb3JuZXIgKi9cclxuXHRwdWJsaWMgcmVhZG9ubHkgYm90dG9tUmlnaHQ6IFZlY3RvcjNcclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIEBwYXJhbSB2ZXJ0aWNlcyBWZXJ0aWNlcyBjb21wb3NpbmcgdGhlIG1lc2hcclxuXHQgKiBAcGFyYW0gdHJhbnNmb3JtIFRyYW5zZm9ybWF0aW9uIHRvIGFwcGx5IHRvIHRoZSBib3VuZGluZyBib3hcclxuXHQgKi9cclxuXHRwdWJsaWMgY29uc3RydWN0b3IodmVydGljZXM6IFZlY3RvcjNbXSwgdHJhbnNmb3JtPzogVHJhbnNmb3JtKSB7XHJcblx0XHRsZXQgW3hzLCB5c10gPSBbdmVydGljZXMubWFwKHYgPT4gdi54KSwgdmVydGljZXMubWFwKHYgPT4gdi55KV1cclxuXHRcdHRoaXMubWluID0gbmV3IFZlY3RvcjMoTWF0aC5taW4oLi4ueHMpLCBNYXRoLm1pbiguLi55cykpXHJcblx0XHR0aGlzLm1heCA9IG5ldyBWZWN0b3IzKE1hdGgubWF4KC4uLnhzKSwgTWF0aC5tYXgoLi4ueXMpKVxyXG5cdFx0dGhpcy50b3BMZWZ0ID0gbmV3IFZlY3RvcjModGhpcy5taW4ueCwgdGhpcy5tYXgueSlcclxuXHRcdHRoaXMudG9wUmlnaHQgPSBuZXcgVmVjdG9yMyh0aGlzLm1heC54LCB0aGlzLm1heC55KVxyXG5cdFx0dGhpcy5ib3R0b21MZWZ0ID0gbmV3IFZlY3RvcjModGhpcy5taW4ueCwgdGhpcy5taW4ueSlcclxuXHRcdHRoaXMuYm90dG9tUmlnaHQgPSBuZXcgVmVjdG9yMyh0aGlzLm1heC54LCB0aGlzLm1pbi55KVxyXG5cclxuXHRcdGlmKHRyYW5zZm9ybSkge1xyXG5cdFx0XHRsZXQgbWF0cml4ID0gdHJhbnNmb3JtLm1hdHJpeFxyXG5cdFx0XHR0aGlzLm1pbiA9IG5ldyBWZWN0b3IzKC4uLm1hdHJpeC5tdWxWZWModGhpcy5taW4ueHl6dykuc2xpY2UoMCwgLTEpKVxyXG5cdFx0XHR0aGlzLm1heCA9IG5ldyBWZWN0b3IzKC4uLm1hdHJpeC5tdWxWZWModGhpcy5tYXgueHl6dykuc2xpY2UoMCwgLTEpKVxyXG5cdFx0XHR0aGlzLnRvcExlZnQgPSBuZXcgVmVjdG9yMyguLi5tYXRyaXgubXVsVmVjKHRoaXMudG9wTGVmdC54eXp3KS5zbGljZSgwLCAtMSkpXHJcblx0XHRcdHRoaXMudG9wUmlnaHQgPSBuZXcgVmVjdG9yMyguLi5tYXRyaXgubXVsVmVjKHRoaXMudG9wUmlnaHQueHl6dykuc2xpY2UoMCwgLTEpKVxyXG5cdFx0XHR0aGlzLmJvdHRvbUxlZnQgPSBuZXcgVmVjdG9yMyguLi5tYXRyaXgubXVsVmVjKHRoaXMuYm90dG9tTGVmdC54eXp3KS5zbGljZSgwLCAtMSkpXHJcblx0XHRcdHRoaXMuYm90dG9tUmlnaHQgPSBuZXcgVmVjdG9yMyguLi5tYXRyaXgubXVsVmVjKHRoaXMuYm90dG9tUmlnaHQueHl6dykuc2xpY2UoMCwgLTEpKVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTGluZSBzZWdtZW50cyBjb21wb3NpbmcgdGhlIGVkZ2VzIG9mIHRoZSBib3hcclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0IGVkZ2VzKCk6IFtWZWN0b3IzLCBWZWN0b3IzXVtdIHtcclxuXHRcdHJldHVybiBbXHJcblx0XHRcdFt0aGlzLnRvcExlZnQsIHRoaXMudG9wUmlnaHRdLFxyXG5cdFx0XHRbdGhpcy50b3BSaWdodCwgdGhpcy5ib3R0b21SaWdodF0sXHJcblx0XHRcdFt0aGlzLmJvdHRvbVJpZ2h0LCB0aGlzLmJvdHRvbUxlZnRdLFxyXG5cdFx0XHRbdGhpcy5ib3R0b21MZWZ0LCB0aGlzLnRvcExlZnRdXHJcblx0XHRdXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBwb2ludCBpcyBjb250YWluZWRcclxuXHQgKi9cclxuXHRwdWJsaWMgaW5zaWRlKHBvaW50OiBWZWN0b3IzKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gdGhpcy5taW4ueCA8PSBwb2ludC54ICYmIHBvaW50LnggPD0gdGhpcy5tYXgueCAmJlxyXG5cdFx0XHR0aGlzLm1pbi55IDw9IHBvaW50LnkgJiYgcG9pbnQueSA8PSB0aGlzLm1heC55XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBib3hlcyBjb2xsaWRlXHJcblx0ICovXHJcblx0cHVibGljIGNvbGxpZGVzKG90aGVyOiBCb3VuZGluZ0JveCk6IGJvb2xlYW4ge1xyXG5cdFx0Zm9yKGxldCBlZGdlIG9mIHRoaXMuZWRnZXMpXHJcblx0XHRcdGZvcihsZXQgb3RoZXJFZGdlIG9mIG90aGVyLmVkZ2VzKVxyXG5cdFx0XHRcdGlmKEdlb21ldHJ5LmludGVyc2VjdHMoZWRnZSwgb3RoZXJFZGdlKSlcclxuXHRcdFx0XHRcdHJldHVybiB0cnVlXHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBgeyR7dGhpcy50b3BMZWZ0fSwgJHt0aGlzLnRvcFJpZ2h0fSwgJHt0aGlzLmJvdHRvbUxlZnR9LCAke3RoaXMuYm90dG9tUmlnaHR9fWBcclxuXHR9XHJcbn0iXX0=