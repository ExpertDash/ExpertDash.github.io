import "./argMinMax.js";
import "https://cdn.jsdelivr.net/npm/chart.js@3.5.1/dist/chart.min.js";
import Generate from "./generate.js";
export class DamageCalculator {
    canvas;
    chart;
    constructor(canvas) {
        this.canvas = canvas;
    }
    calculate({ health, range = 0, gun }) {
        let result = {
            rawBullets: [],
            rawDamageDealt: [],
            bullets: [],
            damageDealt: [],
            trueAccuracies: [],
            deviations: []
        };
        function damager(zone) {
            return 1 / zone.damage * zone.accuracy * health;
        }
        function rounder(value) {
            return Math.max(0, Math.floor(value));
        }
        function getTotalDamage() {
            return result.damageDealt.reduce((a, b) => a + b, 0);
        }
        function calc() {
            result.damageDealt = gun.profile.map((v, i) => result.bullets[i] * v.damage);
            result.trueAccuracies = result.bullets.map(v => v / result.bullets.reduce((a, b) => a + b, 0));
            result.deviations = gun.profile.map((v, i) => result.trueAccuracies[i] - v.accuracy);
            console.log("damageDealt", result.damageDealt);
            console.log("trueAccuracies", result.trueAccuracies);
            console.log("deviations", result.deviations);
            console.log("");
        }
        result.rawBullets = gun.profile.map(zone => damager(zone));
        result.rawDamageDealt = gun.profile.map((v, i) => result.rawBullets[i] * v.damage);
        result.bullets = result.rawBullets.map(v => rounder(v));
        calc();
        let maxIterations = 100;
        let iterations = 0;
        while (getTotalDamage() < health && ++iterations <= maxIterations) {
            // let highestDeviationIndex = argmax(result.deviations.map(v => Math.abs(v)))
            let highestDeviationIndex = result.deviations.indexOf([...result.deviations].sort((a, b) => {
                if (a < 0 && b >= 0)
                    return a;
                if (b < 0 && a >= 0)
                    return b;
                if (a >= 0 && b >= 0)
                    return a - b;
                if (a < 0 && b < 0)
                    return Math.abs(a) - Math.abs(b);
                return 0;
            })[0]);
            result.bullets[highestDeviationIndex] += 1;
            calc();
        }
        return result;
    }
    visualize({ health, range = 0, gun }) {
        let result = this.calculate({
            health: health,
            range: range,
            gun: gun
        });
        let totalDamage = result.damageDealt.reduce((a, b) => a + b, 0);
        let colors = gun.profile.map(zones => [Math.round(Generate.range(60, 200)), Math.round(Generate.range(60, 200)), Math.round(Generate.range(60, 200))]);
        if (this.chart) {
            this.chart.destroy();
            this.chart = null;
        }
        //@ts-ignore
        this.chart = new Chart(this.canvas.getContext("2d"), {
            type: "bar",
            data: {
                labels: gun.profile.map(zone => zone.name),
                datasets: [{
                        label: `Total Damage: ${totalDamage}`,
                        data: result.damageDealt,
                        backgroundColor: gun.profile.map((_, i) => `rgba(${colors[i][0]}, ${colors[i][1]}, ${colors[i][2]}, 0.2)`),
                        borderColor: gun.profile.map((_, i) => `rgba(${colors[i][0]}, ${colors[i][1]}, ${colors[i][2]}, 1)`),
                        borderWidth: 1
                    }]
            },
            options: {
                responsive: false,
                // responsive: true,
                // maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        suggestedMax: health
                    }
                }
            }
        });
        return result;
    }
}
export default DamageCalculator;
//# sourceMappingURL=data:application/json;base64,