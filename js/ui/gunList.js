import * as cobrasu from "/lib/cobrasu/core.js";
import "../core/gun.js";
import "./cardList.js";
const { Cookies } = cobrasu.DOM;
export class GunList {
    element;
    registry;
    cards;
    constructor(element, { cards, guns }) {
        this.element = element;
        this.registry = new Map();
        this.cards = cards;
        for (let gun of guns.sort((a, b) => a.name.localeCompare(b.name))) {
            if (this.registry.has(gun.name)) {
                console.error(`Attempted to registry another gun with the name '${gun.name}'`);
                continue;
            }
            let item = new GunList.Item(this, gun);
            this.element.append(item.element);
            this.registry.set(gun.name, item);
        }
    }
    *[Symbol.iterator]() {
        for (let item of this.registry.values())
            yield item.gun;
    }
}
(function (GunList) {
    class Item {
        gun;
        element;
        name;
        visibility;
        list;
        constructor(list, gun) {
            this.list = list;
            this.gun = gun;
            this.element = document.createElement("div");
            this.element.id = gun.name;
            this.name = document.createElement("div");
            this.name.textContent = gun.name;
            this.element.append(this.name);
            this.visibility = document.createElement("input");
            this.visibility.type = "checkbox";
            this.visibility.addEventListener("change", this.#onCheck);
            this.element.append(this.visibility);
        }
        #onCheck = (_) => {
            let selection = Cookies.get("selection", Object, {});
            if (this.visibility.checked) {
                selection[this.gun.name] = {};
                Cookies.set("selection", selection);
                this.list["cards"].add(this.gun);
            }
            else {
                delete selection[this.gun.name];
                Cookies.set("selection", selection);
                this.list["cards"].remove(this.gun.name);
            }
        };
    }
    GunList.Item = Item;
})(GunList || (GunList = {}));
export default GunList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VuTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91aS9ndW5MaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxPQUFPLE1BQU0sc0JBQXNCLENBQUE7QUFDL0MsT0FBZ0IsZ0JBQWdCLENBQUE7QUFDaEMsT0FBcUIsZUFBZSxDQUFBO0FBRXBDLE1BQU0sRUFBQyxPQUFPLEVBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRTdCLE1BQU0sT0FBTyxPQUFPO0lBQ0gsT0FBTyxDQUFhO0lBQzdCLFFBQVEsQ0FBMkI7SUFDaEMsS0FBSyxDQUFVO0lBRXpCLFlBQW1CLE9BQW9CLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFpQztRQUNyRixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFFbEIsS0FBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDakUsSUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0RBQW9ELEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBO2dCQUM5RSxTQUFRO2FBQ1I7WUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUVqQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQ2pDO0lBQ0YsQ0FBQztJQUVNLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3hCLEtBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDckMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFBO0lBQ2hCLENBQUM7Q0FDRDtBQUVELFdBQWlCLE9BQU87SUFDdkIsTUFBYSxJQUFJO1FBQ0EsR0FBRyxDQUFLO1FBQ1IsT0FBTyxDQUFhO1FBRXBCLElBQUksQ0FBZ0I7UUFDcEIsVUFBVSxDQUFrQjtRQUUzQixJQUFJLENBQVM7UUFFOUIsWUFBbUIsSUFBYSxFQUFFLEdBQVE7WUFDekMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUE7WUFDaEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7WUFFZCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQTtZQUUxQixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7WUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQTtZQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFFOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ2pELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQTtZQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3JDLENBQUM7UUFFRCxRQUFRLEdBQUcsQ0FBQyxDQUFRLEVBQUUsRUFBRTtZQUN2QixJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUEwQixXQUFXLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBRTdFLElBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7Z0JBQzNCLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUE7Z0JBRW5DLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTthQUNoQztpQkFBTTtnQkFDTixPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQTtnQkFFbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTthQUN4QztRQUNGLENBQUMsQ0FBQTtLQUNEO0lBekNZLFlBQUksT0F5Q2hCLENBQUE7QUFDRixDQUFDLEVBM0NnQixPQUFPLEtBQVAsT0FBTyxRQTJDdkI7QUFFRCxlQUFlLE9BQU8sQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvYnJhc3UgZnJvbSBcIi9saWIvY29icmFzdS9jb3JlLmpzXCJcbmltcG9ydCBHdW4gZnJvbSBcIi4uL2NvcmUvZ3VuLmpzXCJcbmltcG9ydCBDYXJkTGlzdCBmcm9tIFwiLi9jYXJkTGlzdC5qc1wiXG5cbmNvbnN0IHtDb29raWVzfSA9IGNvYnJhc3UuRE9NXG5cbmV4cG9ydCBjbGFzcyBHdW5MaXN0IHtcblx0cHVibGljIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50XG5cdHB1YmxpYyByZWdpc3RyeTogTWFwPHN0cmluZywgR3VuTGlzdC5JdGVtPlxuXHRwcm90ZWN0ZWQgY2FyZHM6IENhcmRMaXN0XG5cblx0cHVibGljIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB7Y2FyZHMsIGd1bnN9OiB7Y2FyZHM6IENhcmRMaXN0LCBndW5zOiBHdW5bXX0pIHtcblx0XHR0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG5cdFx0dGhpcy5yZWdpc3RyeSA9IG5ldyBNYXAoKVxuXHRcdHRoaXMuY2FyZHMgPSBjYXJkc1xuXG5cdFx0Zm9yKGxldCBndW4gb2YgZ3Vucy5zb3J0KChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKSkge1xuXHRcdFx0aWYodGhpcy5yZWdpc3RyeS5oYXMoZ3VuLm5hbWUpKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYEF0dGVtcHRlZCB0byByZWdpc3RyeSBhbm90aGVyIGd1biB3aXRoIHRoZSBuYW1lICcke2d1bi5uYW1lfSdgKVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgaXRlbSA9IG5ldyBHdW5MaXN0Lkl0ZW0odGhpcywgZ3VuKVxuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZChpdGVtLmVsZW1lbnQpXG5cblx0XHRcdHRoaXMucmVnaXN0cnkuc2V0KGd1bi5uYW1lLCBpdGVtKVxuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyAqW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxHdW4+IHtcblx0XHRmb3IobGV0IGl0ZW0gb2YgdGhpcy5yZWdpc3RyeS52YWx1ZXMoKSlcblx0XHRcdHlpZWxkIGl0ZW0uZ3VuXG5cdH1cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBHdW5MaXN0IHtcblx0ZXhwb3J0IGNsYXNzIEl0ZW0ge1xuXHRcdHB1YmxpYyByZWFkb25seSBndW46IEd1blxuXHRcdHB1YmxpYyByZWFkb25seSBlbGVtZW50OiBIVE1MRWxlbWVudFxuXG5cdFx0cHVibGljIHJlYWRvbmx5IG5hbWU6IEhUTUxEaXZFbGVtZW50XG5cdFx0cHVibGljIHJlYWRvbmx5IHZpc2liaWxpdHk6IEhUTUxJbnB1dEVsZW1lbnRcblxuXHRcdHByaXZhdGUgcmVhZG9ubHkgbGlzdDogR3VuTGlzdFxuXG5cdFx0cHVibGljIGNvbnN0cnVjdG9yKGxpc3Q6IEd1bkxpc3QsIGd1bjogR3VuKSB7XG5cdFx0XHR0aGlzLmxpc3QgPSBsaXN0XG5cdFx0XHR0aGlzLmd1biA9IGd1blxuXG5cdFx0XHR0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG5cdFx0XHR0aGlzLmVsZW1lbnQuaWQgPSBndW4ubmFtZVxuXG5cdFx0XHR0aGlzLm5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG5cdFx0XHR0aGlzLm5hbWUudGV4dENvbnRlbnQgPSBndW4ubmFtZVxuXHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZCh0aGlzLm5hbWUpXG5cblx0XHRcdHRoaXMudmlzaWJpbGl0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKVxuXHRcdFx0dGhpcy52aXNpYmlsaXR5LnR5cGUgPSBcImNoZWNrYm94XCJcblx0XHRcdHRoaXMudmlzaWJpbGl0eS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMuI29uQ2hlY2spXG5cdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kKHRoaXMudmlzaWJpbGl0eSlcblx0XHR9XG5cblx0XHQjb25DaGVjayA9IChfOiBFdmVudCkgPT4ge1xuXHRcdFx0bGV0IHNlbGVjdGlvbiA9IENvb2tpZXMuZ2V0PHtba2V5OiBzdHJpbmddOiBvYmplY3R9PihcInNlbGVjdGlvblwiLCBPYmplY3QsIHt9KVxuXG5cdFx0XHRpZih0aGlzLnZpc2liaWxpdHkuY2hlY2tlZCkge1xuXHRcdFx0XHRzZWxlY3Rpb25bdGhpcy5ndW4ubmFtZV0gPSB7fVxuXHRcdFx0XHRDb29raWVzLnNldChcInNlbGVjdGlvblwiLCBzZWxlY3Rpb24pXG5cblx0XHRcdFx0dGhpcy5saXN0W1wiY2FyZHNcIl0uYWRkKHRoaXMuZ3VuKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIHNlbGVjdGlvblt0aGlzLmd1bi5uYW1lXVxuXHRcdFx0XHRDb29raWVzLnNldChcInNlbGVjdGlvblwiLCBzZWxlY3Rpb24pXG5cblx0XHRcdFx0dGhpcy5saXN0W1wiY2FyZHNcIl0ucmVtb3ZlKHRoaXMuZ3VuLm5hbWUpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEd1bkxpc3QiXX0=