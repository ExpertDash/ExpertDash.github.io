/**
 * Manages all systems
 */
export default class Systems {
    constructor() {
        this.registry = new Map();
        this.dependencies = new Map();
    }
    /**
     * Add a new system
     * @param systems System classe or instance
     */
    add(system, order = {}) {
        let ctor;
        let instance;
        switch (typeof system) {
            case "function":
                ctor = system;
                instance = new ctor();
                break;
            case "object":
                instance = system;
                ctor = instance.constructor;
                break;
        }
        if (this.registry.has(ctor))
            throw new Error(`'${ctor.name}' already present in this set of systems`);
        this.registry.set(ctor, instance);
        let addDependencies = (sys, deps) => {
            let set;
            if (this.dependencies.has(sys))
                set = this.dependencies.get(sys);
            else {
                set = new Set();
                this.dependencies.set(sys, set);
            }
            for (let ctor of deps)
                set.add(ctor);
        };
        addDependencies(ctor, order.after ?? []);
        if (order.before)
            for (let system of order.before)
                addDependencies(system, [ctor]);
    }
    /**
     * Gets the system instance
     * @param ctor System class
     */
    get(ctor) {
        return this.registry.get(ctor);
    }
    /**
     * Remove existing systems
     * @param ctors System classes
     */
    remove(...ctors) {
        for (let ctor of ctors)
            this.registry.delete(ctor);
    }
    /**
     * Generates an iterator for the system instances with an order considering dependencies
     */
    [Symbol.iterator]() {
        let edges = new Map(this.dependencies);
        let list = [];
        let set = new Set([...edges]
            .filter(v => v[1].size == 0)
            .map(v => v[0]));
        while (set.size > 0) {
            let it = set[Symbol.iterator]();
            let { value: n } = it.next();
            list.push(n);
            set.delete(n);
            for (let m of [...edges].filter(v => v[1].has(n)).map(v => v[0])) {
                let incoming = edges.get(m);
                incoming.delete(n);
                if (incoming.size == 0)
                    set.add(m);
            }
            if (edges.get(n).size == 0)
                edges.delete(n);
        }
        if (edges.size > 0) {
            let s = "Circularaly dependent systems detected";
            [...edges].forEach(v => [...v[1]].forEach(from => s += `\n\t${from.name} -> ${v[0].name}`));
            throw new Error(s);
        }
        return [...this.registry.values()].sort((a, b) => {
            let ctorA = a.constructor;
            let ctorB = b.constructor;
            return list.indexOf(ctorA) - list.indexOf(ctorB);
        }).values();
    }
}
//# sourceMappingURL=data:application/json;base64,