import Vector3 from "./vec3.js";
export default class Geometry {
    /**
     * Determines whether the points are colinear, clockwise, or counterclockwise
     * @param a Point 1
     * @param b Point 2
     * @param c Point 3
     * @returns 0 if colinear, > 0 if clockwise, or < 0 if counter-clockwise
     */
    static direction(a, b, c) {
        return Math.sign((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y));
    }
    /**
     * @param l Line
     * @param p Point
     * @returns Whether the point is on the line
     */
    static on(l, p) {
        let [ls, le] = l;
        return Math.min(ls.x, le.x) <= p.x && p.x <= Math.max(ls.x, le.x)
            && Math.min(ls.y, le.y) <= p.y && p.y <= Math.max(ls.y, le.y);
    }
    /**
     * @param l1 Line 1
     * @param l2 Line 2
     * @returns Intersection point between lines 1 and 2. NaN vector if none
     */
    static intersection(l1, l2) {
        let [s1, e1] = l1;
        let [s2, e2] = l2;
        let [d1, d2] = [e1.sub(s1), e2.sub(s2)];
        let u = s2.sub(s1).cross2d(d2.div(d1.cross2d(d2)));
        let v = s2.sub(s1).cross2d(d1.div(d1.cross2d(d2)));
        if (d1.cross2d(d2) == 0 && s2.sub(s1).cross2d(d1) == 0) {
            let a = s2.sub(s1).dot(d1.div(d1.dot(d1)));
            let b = a + d2.dot(d1.div(d1.dot(d1)));
            let t0 = Math.min(a, b);
            let t1 = Math.max(a, b);
            return (t0 <= 0 && 0 <= t1) ||
                (0 <= t0 && t1 <= 1) ||
                (t0 <= 1 && 1 <= t1) ? new Vector3(u, v) : new Vector3(NaN, NaN);
        }
        if (d2.cross2d(d1) == 0 && s2.sub(s1).cross2d(d1) != 0)
            return new Vector3(NaN, NaN);
        return d2.cross2d(d1) != 0 &&
            0 <= u && u <= 1 &&
            0 <= v && v <= 1 ? new Vector3(u, v) : new Vector3(NaN, NaN);
    }
    /**
     * @param l1 Line 1
     * @param l2 Line 2
     * @returns Whether line 1 intersects line 2
     */
    static intersects(l1, l2) {
        return !Geometry.intersection(l1, l2).isNan;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbWV0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWF0aC9nZW9tZXRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUE7QUFJL0IsTUFBTSxDQUFDLE9BQU8sT0FBZ0IsUUFBUTtJQUNyQzs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBVTtRQUN6RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3hFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFPLEVBQUUsQ0FBVTtRQUNuQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNoQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2VBQzdELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQVEsRUFBRSxFQUFRO1FBQzVDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUV2QyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2xELElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFbEQsSUFBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEQsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRXRDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBQ3ZCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1lBRXZCLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzFCLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNwQixDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtTQUNqRTtRQUVELElBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUNwRCxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUU3QixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztZQUN6QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDOUQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQVEsRUFBRSxFQUFRO1FBQzFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUE7SUFDNUMsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlY3RvcjMgZnJvbSBcIi4vdmVjMy5qc1wiXHJcblxyXG50eXBlIExpbmUgPSBbVmVjdG9yMywgVmVjdG9yM11cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIEdlb21ldHJ5IHtcclxuXHQvKipcclxuXHQgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBvaW50cyBhcmUgY29saW5lYXIsIGNsb2Nrd2lzZSwgb3IgY291bnRlcmNsb2Nrd2lzZVxyXG5cdCAqIEBwYXJhbSBhIFBvaW50IDFcclxuXHQgKiBAcGFyYW0gYiBQb2ludCAyXHJcblx0ICogQHBhcmFtIGMgUG9pbnQgM1xyXG5cdCAqIEByZXR1cm5zIDAgaWYgY29saW5lYXIsID4gMCBpZiBjbG9ja3dpc2UsIG9yIDwgMCBpZiBjb3VudGVyLWNsb2Nrd2lzZVxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgZGlyZWN0aW9uKGE6IFZlY3RvcjMsIGI6IFZlY3RvcjMsIGM6IFZlY3RvcjMpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIE1hdGguc2lnbigoYi55IC0gYS55KSAqIChjLnggLSBiLngpIC0gKGIueCAtIGEueCkgKiAoYy55IC0gYi55KSlcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBwYXJhbSBsIExpbmVcclxuXHQgKiBAcGFyYW0gcCBQb2ludFxyXG5cdCAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHBvaW50IGlzIG9uIHRoZSBsaW5lXHJcblx0ICovXHJcblx0cHVibGljIHN0YXRpYyBvbihsOiBMaW5lLCBwOiBWZWN0b3IzKTogYm9vbGVhbiB7XHJcblx0XHRsZXQgW2xzLCBsZV0gPSBsXHJcblx0XHRyZXR1cm4gTWF0aC5taW4obHMueCwgbGUueCkgPD0gcC54ICYmIHAueCA8PSBNYXRoLm1heChscy54LCBsZS54KVxyXG5cdFx0XHQmJiBNYXRoLm1pbihscy55LCBsZS55KSA8PSBwLnkgJiYgcC55IDw9IE1hdGgubWF4KGxzLnksIGxlLnkpXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcGFyYW0gbDEgTGluZSAxXHJcblx0ICogQHBhcmFtIGwyIExpbmUgMlxyXG5cdCAqIEByZXR1cm5zIEludGVyc2VjdGlvbiBwb2ludCBiZXR3ZWVuIGxpbmVzIDEgYW5kIDIuIE5hTiB2ZWN0b3IgaWYgbm9uZVxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgaW50ZXJzZWN0aW9uKGwxOiBMaW5lLCBsMjogTGluZSk6IFZlY3RvcjMge1xyXG5cdFx0bGV0IFtzMSwgZTFdID0gbDFcclxuXHRcdGxldCBbczIsIGUyXSA9IGwyXHJcblx0XHRsZXQgW2QxLCBkMl0gPSBbZTEuc3ViKHMxKSwgZTIuc3ViKHMyKV1cclxuXHJcblx0XHRsZXQgdSA9IHMyLnN1YihzMSkuY3Jvc3MyZChkMi5kaXYoZDEuY3Jvc3MyZChkMikpKVxyXG5cdFx0bGV0IHYgPSBzMi5zdWIoczEpLmNyb3NzMmQoZDEuZGl2KGQxLmNyb3NzMmQoZDIpKSlcclxuXHJcblx0XHRpZihkMS5jcm9zczJkKGQyKSA9PSAwICYmIHMyLnN1YihzMSkuY3Jvc3MyZChkMSkgPT0gMCkge1xyXG5cdFx0XHRsZXQgYSA9IHMyLnN1YihzMSkuZG90KGQxLmRpdihkMS5kb3QoZDEpKSlcclxuXHRcdFx0bGV0IGIgPSBhICsgZDIuZG90KGQxLmRpdihkMS5kb3QoZDEpKSlcclxuXHJcblx0XHRcdGxldCB0MCA9IE1hdGgubWluKGEsIGIpXHJcblx0XHRcdGxldCB0MSA9IE1hdGgubWF4KGEsIGIpXHJcblxyXG5cdFx0XHRyZXR1cm4gKHQwIDw9IDAgJiYgMCA8PSB0MSkgfHxcclxuXHRcdFx0XHQoMCA8PSB0MCAmJiB0MSA8PSAxKSB8fFxyXG5cdFx0XHRcdCh0MCA8PSAxICYmIDEgPD0gdDEpID8gbmV3IFZlY3RvcjModSwgdikgOiBuZXcgVmVjdG9yMyhOYU4sIE5hTilcclxuXHRcdH1cclxuXHJcblx0XHRpZihkMi5jcm9zczJkKGQxKSA9PSAwICYmIHMyLnN1YihzMSkuY3Jvc3MyZChkMSkgIT0gMClcclxuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IzKE5hTiwgTmFOKVxyXG5cclxuXHRcdHJldHVybiBkMi5jcm9zczJkKGQxKSAhPSAwICYmXHJcblx0XHRcdDAgPD0gdSAmJiB1IDw9IDEgJiZcclxuXHRcdFx0MCA8PSB2ICYmIHYgPD0gMSA/IG5ldyBWZWN0b3IzKHUsIHYpIDogbmV3IFZlY3RvcjMoTmFOLCBOYU4pXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAcGFyYW0gbDEgTGluZSAxXHJcblx0ICogQHBhcmFtIGwyIExpbmUgMlxyXG5cdCAqIEByZXR1cm5zIFdoZXRoZXIgbGluZSAxIGludGVyc2VjdHMgbGluZSAyXHJcblx0ICovXHJcblx0cHVibGljIHN0YXRpYyBpbnRlcnNlY3RzKGwxOiBMaW5lLCBsMjogTGluZSk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuICFHZW9tZXRyeS5pbnRlcnNlY3Rpb24obDEsIGwyKS5pc05hblxyXG5cdH1cclxufSJdfQ==