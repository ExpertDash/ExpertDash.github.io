import { RenderSystem } from "../common/lib.js";
import World from "../common/world.js";
import { vec3 } from "../math/vec3.js";
import BoundingBox from "../physics/boundingBox.js";
const GL = WebGLRenderingContext;
export class Mesh {
    constructor(vertices, triangles, uvs) {
        this.vertices = vertices;
        this.triangles = triangles;
        this.uvs = uvs;
        this.boundingBox = new BoundingBox(vertices);
        // let hull = []
        // for(let v of vertices) {
        // }
        let gl = World.systems.get(RenderSystem).context;
        if (!gl || this.vertexBuffer != null)
            return;
        this.vertexBuffer = gl.createBuffer();
        gl.bindBuffer(GL.ARRAY_BUFFER, this.vertexBuffer);
        gl.bufferData(GL.ARRAY_BUFFER, new Float32Array(this.vertices.map(v => [v.x, v.y]).flat()), GL.STATIC_DRAW);
    }
}
(function (Mesh) {
    class Primitives {
    }
    Primitives.quad = Object.freeze(new Mesh([
        vec3(-1, 1),
        vec3(1, 1),
        vec3(-1, -1),
        vec3(1, -1)
    ]));
    Mesh.Primitives = Primitives;
})(Mesh || (Mesh = {}));
export default Mesh;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW5kZXJpbmcvbWVzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUE7QUFDN0MsT0FBTyxLQUFLLE1BQU0sb0JBQW9CLENBQUE7QUFDdEMsT0FBZ0IsRUFBQyxJQUFJLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQTtBQUM3QyxPQUFPLFdBQVcsTUFBTSwyQkFBMkIsQ0FBQTtBQUVuRCxNQUFNLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQTtBQUVoQyxNQUFNLE9BQU8sSUFBSTtJQWFoQixZQUFtQixRQUFtQixFQUFFLFNBQW9CLEVBQUUsR0FBYztRQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtRQUMxQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNkLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFNUMsZ0JBQWdCO1FBRWhCLDJCQUEyQjtRQUUzQixJQUFJO1FBRUosSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFBO1FBRWhELElBQUcsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJO1lBQ2xDLE9BQU07UUFFUCxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUNyQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2pELEVBQUUsQ0FBQyxVQUFVLENBQ1osRUFBRSxDQUFDLFlBQVksRUFDZixJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUMzRCxFQUFFLENBQUMsV0FBVyxDQUNkLENBQUE7SUFDRixDQUFDO0NBQ0Q7QUFFRCxXQUFpQixJQUFJO0lBQ3BCLE1BQWEsVUFBVTs7SUFDUixlQUFJLEdBQW1CLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDM0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1YsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNYLENBQUMsQ0FBQyxDQUFBO0lBTlMsZUFBVSxhQU90QixDQUFBO0FBQ0YsQ0FBQyxFQVRnQixJQUFJLEtBQUosSUFBSSxRQVNwQjtBQUVELGVBQWUsSUFBSSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZW5kZXJTeXN0ZW19IGZyb20gXCIuLi9jb21tb24vbGliLmpzXCJcclxuaW1wb3J0IFdvcmxkIGZyb20gXCIuLi9jb21tb24vd29ybGQuanNcIlxyXG5pbXBvcnQgVmVjdG9yMywge3ZlYzN9IGZyb20gXCIuLi9tYXRoL3ZlYzMuanNcIlxyXG5pbXBvcnQgQm91bmRpbmdCb3ggZnJvbSBcIi4uL3BoeXNpY3MvYm91bmRpbmdCb3guanNcIlxyXG5cclxuY29uc3QgR0wgPSBXZWJHTFJlbmRlcmluZ0NvbnRleHRcclxuXHJcbmV4cG9ydCBjbGFzcyBNZXNoIHtcclxuXHRwdWJsaWMgcmVhZG9ubHkgdmVydGljZXM6IFZlY3RvcjNbXVxyXG5cdHB1YmxpYyByZWFkb25seSB0cmlhbmdsZXM6IG51bWJlcltdXHJcblx0cHVibGljIHJlYWRvbmx5IHV2czogbnVtYmVyW11cclxuXHJcblx0LyoqIExvY2FsIGJvdW5kaW5nIGJveCAqL1xyXG5cdHB1YmxpYyByZWFkb25seSBib3VuZGluZ0JveDogQm91bmRpbmdCb3hcclxuXHJcblx0LyoqIExvY2FsIGNvbnZleCBodWxsIGNvbnRhaW5pbmcgcG9pbnRzIGluIGEgY291bnRlci1jbG9ja3dpc2UgZmFzaGlvbiBhcm91bmQgdGhlIG1lc2ggKi9cclxuXHRwdWJsaWMgcmVhZG9ubHkgaHVsbDogVmVjdG9yM1tdXHJcblxyXG5cdHB1YmxpYyByZWFkb25seSB2ZXJ0ZXhCdWZmZXI6IFdlYkdMQnVmZmVyXHJcblxyXG5cdHB1YmxpYyBjb25zdHJ1Y3Rvcih2ZXJ0aWNlczogVmVjdG9yM1tdLCB0cmlhbmdsZXM/OiBudW1iZXJbXSwgdXZzPzogbnVtYmVyW10pIHtcclxuXHRcdHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlc1xyXG5cdFx0dGhpcy50cmlhbmdsZXMgPSB0cmlhbmdsZXNcclxuXHRcdHRoaXMudXZzID0gdXZzXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbmV3IEJvdW5kaW5nQm94KHZlcnRpY2VzKVxyXG5cclxuXHRcdC8vIGxldCBodWxsID0gW11cclxuXHJcblx0XHQvLyBmb3IobGV0IHYgb2YgdmVydGljZXMpIHtcclxuXHRcdFx0XHJcblx0XHQvLyB9XHJcblxyXG5cdFx0bGV0IGdsID0gV29ybGQuc3lzdGVtcy5nZXQoUmVuZGVyU3lzdGVtKS5jb250ZXh0XHJcblxyXG5cdFx0aWYoIWdsIHx8IHRoaXMudmVydGV4QnVmZmVyICE9IG51bGwpXHJcblx0XHRcdHJldHVyblxyXG5cclxuXHRcdHRoaXMudmVydGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKClcclxuXHRcdGdsLmJpbmRCdWZmZXIoR0wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleEJ1ZmZlcilcclxuXHRcdGdsLmJ1ZmZlckRhdGEoXHJcblx0XHRcdEdMLkFSUkFZX0JVRkZFUixcclxuXHRcdFx0bmV3IEZsb2F0MzJBcnJheSh0aGlzLnZlcnRpY2VzLm1hcCh2ID0+IFt2LngsIHYueV0pLmZsYXQoKSksXHJcblx0XHRcdEdMLlNUQVRJQ19EUkFXXHJcblx0XHQpXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIE1lc2gge1xyXG5cdGV4cG9ydCBjbGFzcyBQcmltaXRpdmVzIHtcclxuXHRcdHB1YmxpYyBzdGF0aWMgcXVhZDogUmVhZG9ubHk8TWVzaD4gPSBPYmplY3QuZnJlZXplKG5ldyBNZXNoKFtcclxuXHRcdFx0dmVjMygtMSwgMSksXHJcblx0XHRcdHZlYzMoMSwgMSksXHJcblx0XHRcdHZlYzMoLTEsIC0xKSxcclxuXHRcdFx0dmVjMygxLCAtMSlcclxuXHRcdF0pKVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWVzaCJdfQ==