import { RenderSystem } from "../common/lib.js";
import World from "../common/world.js";
import { vec3 } from "../math/vec3.js";
import BoundingBox from "../physics/boundingBox.js";
const GL = WebGLRenderingContext;
export class Mesh {
    constructor(vertices, triangles, uvs) {
        this.vertices = vertices;
        this.triangles = triangles;
        this.uvs = uvs;
        this.boundingBox = new BoundingBox(vertices);
        // let hull = []
        // for(let v of vertices) {
        // }
    }
    createVertexBuffer() {
        let gl = World.systems.get(RenderSystem).context;
        let vertexBuffer = gl.createBuffer();
        gl.bindBuffer(GL.ARRAY_BUFFER, vertexBuffer);
        gl.bufferData(GL.ARRAY_BUFFER, new Float32Array(this.vertices.map(v => [v.x, v.y]).flat()), GL.STATIC_DRAW);
        return vertexBuffer;
    }
}
(function (Mesh) {
    class Primitives {
    }
    Primitives.quad = Object.freeze(new Mesh([
        vec3(-1, 1),
        vec3(1, 1),
        vec3(-1, -1),
        vec3(1, -1)
    ]));
    Mesh.Primitives = Primitives;
})(Mesh || (Mesh = {}));
export default Mesh;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW5kZXJpbmcvbWVzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUE7QUFDN0MsT0FBTyxLQUFLLE1BQU0sb0JBQW9CLENBQUE7QUFDdEMsT0FBZ0IsRUFBQyxJQUFJLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQTtBQUM3QyxPQUFPLFdBQVcsTUFBTSwyQkFBMkIsQ0FBQTtBQUVuRCxNQUFNLEVBQUUsR0FBRyxxQkFBcUIsQ0FBQTtBQUVoQyxNQUFNLE9BQU8sSUFBSTtJQVdoQixZQUFtQixRQUFtQixFQUFFLFNBQW9CLEVBQUUsR0FBYztRQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtRQUMxQixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNkLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFNUMsZ0JBQWdCO1FBRWhCLDJCQUEyQjtRQUUzQixJQUFJO0lBQ0wsQ0FBQztJQUVNLGtCQUFrQjtRQUN4QixJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUE7UUFFaEQsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ3BDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUM1QyxFQUFFLENBQUMsVUFBVSxDQUNaLEVBQUUsQ0FBQyxZQUFZLEVBQ2YsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFDM0QsRUFBRSxDQUFDLFdBQVcsQ0FDZCxDQUFBO1FBRUQsT0FBTyxZQUFZLENBQUE7SUFDcEIsQ0FBQztDQUNEO0FBRUQsV0FBaUIsSUFBSTtJQUNwQixNQUFhLFVBQVU7O0lBQ1IsZUFBSSxHQUFtQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO1FBQzNELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDWCxDQUFDLENBQUMsQ0FBQTtJQU5TLGVBQVUsYUFPdEIsQ0FBQTtBQUNGLENBQUMsRUFUZ0IsSUFBSSxLQUFKLElBQUksUUFTcEI7QUFFRCxlQUFlLElBQUksQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVuZGVyU3lzdGVtfSBmcm9tIFwiLi4vY29tbW9uL2xpYi5qc1wiXHJcbmltcG9ydCBXb3JsZCBmcm9tIFwiLi4vY29tbW9uL3dvcmxkLmpzXCJcclxuaW1wb3J0IFZlY3RvcjMsIHt2ZWMzfSBmcm9tIFwiLi4vbWF0aC92ZWMzLmpzXCJcclxuaW1wb3J0IEJvdW5kaW5nQm94IGZyb20gXCIuLi9waHlzaWNzL2JvdW5kaW5nQm94LmpzXCJcclxuXHJcbmNvbnN0IEdMID0gV2ViR0xSZW5kZXJpbmdDb250ZXh0XHJcblxyXG5leHBvcnQgY2xhc3MgTWVzaCB7XHJcblx0cHVibGljIHJlYWRvbmx5IHZlcnRpY2VzOiBWZWN0b3IzW11cclxuXHRwdWJsaWMgcmVhZG9ubHkgdHJpYW5nbGVzOiBudW1iZXJbXVxyXG5cdHB1YmxpYyByZWFkb25seSB1dnM6IG51bWJlcltdXHJcblxyXG5cdC8qKiBMb2NhbCBib3VuZGluZyBib3ggKi9cclxuXHRwdWJsaWMgcmVhZG9ubHkgYm91bmRpbmdCb3g6IEJvdW5kaW5nQm94XHJcblxyXG5cdC8qKiBMb2NhbCBjb252ZXggaHVsbCBjb250YWluaW5nIHBvaW50cyBpbiBhIGNvdW50ZXItY2xvY2t3aXNlIGZhc2hpb24gYXJvdW5kIHRoZSBtZXNoICovXHJcblx0cHVibGljIHJlYWRvbmx5IGh1bGw6IFZlY3RvcjNbXVxyXG5cclxuXHRwdWJsaWMgY29uc3RydWN0b3IodmVydGljZXM6IFZlY3RvcjNbXSwgdHJpYW5nbGVzPzogbnVtYmVyW10sIHV2cz86IG51bWJlcltdKSB7XHJcblx0XHR0aGlzLnZlcnRpY2VzID0gdmVydGljZXNcclxuXHRcdHRoaXMudHJpYW5nbGVzID0gdHJpYW5nbGVzXHJcblx0XHR0aGlzLnV2cyA9IHV2c1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3VuZGluZ0JveCh2ZXJ0aWNlcylcclxuXHJcblx0XHQvLyBsZXQgaHVsbCA9IFtdXHJcblxyXG5cdFx0Ly8gZm9yKGxldCB2IG9mIHZlcnRpY2VzKSB7XHJcblx0XHRcdFxyXG5cdFx0Ly8gfVxyXG5cdH1cclxuXHJcblx0cHVibGljIGNyZWF0ZVZlcnRleEJ1ZmZlcigpOiBXZWJHTEJ1ZmZlciB7XHJcblx0XHRsZXQgZ2wgPSBXb3JsZC5zeXN0ZW1zLmdldChSZW5kZXJTeXN0ZW0pLmNvbnRleHRcclxuXHJcblx0XHRsZXQgdmVydGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKClcclxuXHRcdGdsLmJpbmRCdWZmZXIoR0wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhCdWZmZXIpXHJcblx0XHRnbC5idWZmZXJEYXRhKFxyXG5cdFx0XHRHTC5BUlJBWV9CVUZGRVIsXHJcblx0XHRcdG5ldyBGbG9hdDMyQXJyYXkodGhpcy52ZXJ0aWNlcy5tYXAodiA9PiBbdi54LCB2LnldKS5mbGF0KCkpLFxyXG5cdFx0XHRHTC5TVEFUSUNfRFJBV1xyXG5cdFx0KVxyXG5cclxuXHRcdHJldHVybiB2ZXJ0ZXhCdWZmZXJcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTWVzaCB7XHJcblx0ZXhwb3J0IGNsYXNzIFByaW1pdGl2ZXMge1xyXG5cdFx0cHVibGljIHN0YXRpYyBxdWFkOiBSZWFkb25seTxNZXNoPiA9IE9iamVjdC5mcmVlemUobmV3IE1lc2goW1xyXG5cdFx0XHR2ZWMzKC0xLCAxKSxcclxuXHRcdFx0dmVjMygxLCAxKSxcclxuXHRcdFx0dmVjMygtMSwgLTEpLFxyXG5cdFx0XHR2ZWMzKDEsIC0xKVxyXG5cdFx0XSkpXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNoIl19