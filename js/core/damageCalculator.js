import { mathx } from "/lib/cobrasu/core.js";
import "./simulation.js";
import "./gun.js";
export default class DamageCalculator {
    static simulate({ profile, scenario }) {
        let regions = Object.fromEntries(scenario.regions.map(name => [name, {
                raw: {
                    bullets: 0,
                    damageDealt: 0,
                },
                bullets: 0,
                damageDealt: 0,
                trueDistribution: 0,
                deviation: 0
            }]));
        let getDamage = (region) => 1 / profile.damage[region] * scenario.distribution[region] * scenario.health;
        let roundDown = (value) => Math.max(0, Math.floor(value));
        let getTotalDamage = () => Object.values(regions).map(region => region.damageDealt).reduce((a, b) => a + b, 0);
        let getTotalBullets = () => Object.values(regions).map(region => region.bullets).reduce((a, b) => a + b, 0);
        let calculateStats = () => {
            for (let [name, region] of Object.entries(regions)) {
                region.damageDealt = region.bullets * profile.damage[name];
                region.trueDistribution = region.bullets / getTotalBullets();
                region.deviation = region.trueDistribution - scenario.distribution[name];
            }
        };
        for (let [name, region] of Object.entries(regions)) {
            region.raw.bullets = getDamage(name);
            region.raw.damageDealt = region.raw.bullets * profile.damage[name];
            region.bullets = roundDown(region.raw.bullets);
        }
        calculateStats();
        while (getTotalDamage() > scenario.health) {
            let regionValues = Object.values(regions);
            let minDeviationIndex = mathx.argmax(...regionValues.map(region => region.deviation));
            regionValues[minDeviationIndex].bullets -= 1;
            calculateStats();
        }
        while (getTotalDamage() < scenario.health) {
            let regionValues = Object.values(regions);
            let minDeviationIndex = mathx.argmin(...regionValues.map(region => region.deviation));
            regionValues[minDeviationIndex].bullets += 1;
            calculateStats();
        }
        return { regions: regions };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFtYWdlQ2FsY3VsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2RhbWFnZUNhbGN1bGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLHNCQUFzQixDQUFBO0FBQzFDLE9BQXVCLGlCQUFpQixDQUFBO0FBQ3hDLE9BQWdCLFVBQVUsQ0FBQTtBQUUxQixNQUFNLENBQUMsT0FBTyxPQUFPLGdCQUFnQjtJQUM3QixNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBd0Q7UUFDaEcsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUE2QjtnQkFDL0YsR0FBRyxFQUFFO29CQUNKLE9BQU8sRUFBRSxDQUFDO29CQUNWLFdBQVcsRUFBRSxDQUFDO2lCQUNkO2dCQUNELE9BQU8sRUFBRSxDQUFDO2dCQUNWLFdBQVcsRUFBRSxDQUFDO2dCQUNkLGdCQUFnQixFQUFFLENBQUM7Z0JBQ25CLFNBQVMsRUFBRSxDQUFDO2FBQ1gsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUVMLElBQUksU0FBUyxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUE7UUFDaEgsSUFBSSxTQUFTLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUNqRSxJQUFJLGNBQWMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzlHLElBQUksZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFM0csSUFBSSxjQUFjLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLEtBQUksSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNsRCxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDMUQsTUFBTSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUcsZUFBZSxFQUFFLENBQUE7Z0JBQzVELE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDeEU7UUFDRixDQUFDLENBQUE7UUFFRCxLQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNsRCxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNsRSxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1NBQzlDO1FBRUQsY0FBYyxFQUFFLENBQUE7UUFFaEIsT0FBTSxjQUFjLEVBQUUsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ3pDLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDekMsSUFBSSxpQkFBaUIsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO1lBQ3JGLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUE7WUFFNUMsY0FBYyxFQUFFLENBQUE7U0FDaEI7UUFFRCxPQUFNLGNBQWMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDekMsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN6QyxJQUFJLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7WUFDckYsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQTtZQUU1QyxjQUFjLEVBQUUsQ0FBQTtTQUNoQjtRQUVELE9BQU8sRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUE7SUFDMUIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHttYXRoeH0gZnJvbSBcIi9saWIvY29icmFzdS9jb3JlLmpzXCJcbmltcG9ydCBTaW11bGF0aW9uIGZyb20gXCIuL3NpbXVsYXRpb24uanNcIlxuaW1wb3J0IEd1biBmcm9tIFwiLi9ndW4uanNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYW1hZ2VDYWxjdWxhdG9yIHtcblx0cHVibGljIHN0YXRpYyBzaW11bGF0ZSh7cHJvZmlsZSwgc2NlbmFyaW99OiB7cHJvZmlsZTogR3VuLlByb2ZpbGUsIHNjZW5hcmlvOiBTaW11bGF0aW9uLlNjZW5hcmlvfSk6IFNpbXVsYXRpb24uUmVzdWx0IHtcblx0XHRsZXQgcmVnaW9ucyA9IE9iamVjdC5mcm9tRW50cmllcyhzY2VuYXJpby5yZWdpb25zLm1hcChuYW1lID0+IFtuYW1lLCAoPFNpbXVsYXRpb24uUmVzdWx0LlJlZ2lvbj57XG5cdFx0XHRyYXc6IHtcblx0XHRcdFx0YnVsbGV0czogMCxcblx0XHRcdFx0ZGFtYWdlRGVhbHQ6IDAsXG5cdFx0XHR9LFxuXHRcdFx0YnVsbGV0czogMCxcblx0XHRcdGRhbWFnZURlYWx0OiAwLFxuXHRcdFx0dHJ1ZURpc3RyaWJ1dGlvbjogMCxcblx0XHRcdGRldmlhdGlvbjogMFxuXHRcdH0pXSkpXG5cblx0XHRsZXQgZ2V0RGFtYWdlID0gKHJlZ2lvbjogc3RyaW5nKSA9PiAxIC8gcHJvZmlsZS5kYW1hZ2VbcmVnaW9uXSAqIHNjZW5hcmlvLmRpc3RyaWJ1dGlvbltyZWdpb25dICogc2NlbmFyaW8uaGVhbHRoXG5cdFx0bGV0IHJvdW5kRG93biA9ICh2YWx1ZTogbnVtYmVyKSA9PiBNYXRoLm1heCgwLCBNYXRoLmZsb29yKHZhbHVlKSlcblx0XHRsZXQgZ2V0VG90YWxEYW1hZ2UgPSAoKSA9PiBPYmplY3QudmFsdWVzKHJlZ2lvbnMpLm1hcChyZWdpb24gPT4gcmVnaW9uLmRhbWFnZURlYWx0KS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKVxuXHRcdGxldCBnZXRUb3RhbEJ1bGxldHMgPSAoKSA9PiBPYmplY3QudmFsdWVzKHJlZ2lvbnMpLm1hcChyZWdpb24gPT4gcmVnaW9uLmJ1bGxldHMpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApXG5cblx0XHRsZXQgY2FsY3VsYXRlU3RhdHMgPSAoKSA9PiB7XG5cdFx0XHRmb3IobGV0IFtuYW1lLCByZWdpb25dIG9mIE9iamVjdC5lbnRyaWVzKHJlZ2lvbnMpKSB7XG5cdFx0XHRcdHJlZ2lvbi5kYW1hZ2VEZWFsdCA9IHJlZ2lvbi5idWxsZXRzICogcHJvZmlsZS5kYW1hZ2VbbmFtZV1cblx0XHRcdFx0cmVnaW9uLnRydWVEaXN0cmlidXRpb24gPSByZWdpb24uYnVsbGV0cyAvIGdldFRvdGFsQnVsbGV0cygpXG5cdFx0XHRcdHJlZ2lvbi5kZXZpYXRpb24gPSByZWdpb24udHJ1ZURpc3RyaWJ1dGlvbiAtIHNjZW5hcmlvLmRpc3RyaWJ1dGlvbltuYW1lXVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvcihsZXQgW25hbWUsIHJlZ2lvbl0gb2YgT2JqZWN0LmVudHJpZXMocmVnaW9ucykpIHtcblx0XHRcdHJlZ2lvbi5yYXcuYnVsbGV0cyA9IGdldERhbWFnZShuYW1lKVxuXHRcdFx0cmVnaW9uLnJhdy5kYW1hZ2VEZWFsdCA9IHJlZ2lvbi5yYXcuYnVsbGV0cyAqIHByb2ZpbGUuZGFtYWdlW25hbWVdXG5cdFx0XHRyZWdpb24uYnVsbGV0cyA9IHJvdW5kRG93bihyZWdpb24ucmF3LmJ1bGxldHMpXG5cdFx0fVxuXG5cdFx0Y2FsY3VsYXRlU3RhdHMoKVxuXG5cdFx0d2hpbGUoZ2V0VG90YWxEYW1hZ2UoKSA+IHNjZW5hcmlvLmhlYWx0aCkge1xuXHRcdFx0bGV0IHJlZ2lvblZhbHVlcyA9IE9iamVjdC52YWx1ZXMocmVnaW9ucylcblx0XHRcdGxldCBtaW5EZXZpYXRpb25JbmRleCA9IG1hdGh4LmFyZ21heCguLi5yZWdpb25WYWx1ZXMubWFwKHJlZ2lvbiA9PiByZWdpb24uZGV2aWF0aW9uKSlcblx0XHRcdHJlZ2lvblZhbHVlc1ttaW5EZXZpYXRpb25JbmRleF0uYnVsbGV0cyAtPSAxXG5cblx0XHRcdGNhbGN1bGF0ZVN0YXRzKClcblx0XHR9XG5cblx0XHR3aGlsZShnZXRUb3RhbERhbWFnZSgpIDwgc2NlbmFyaW8uaGVhbHRoKSB7XG5cdFx0XHRsZXQgcmVnaW9uVmFsdWVzID0gT2JqZWN0LnZhbHVlcyhyZWdpb25zKVxuXHRcdFx0bGV0IG1pbkRldmlhdGlvbkluZGV4ID0gbWF0aHguYXJnbWluKC4uLnJlZ2lvblZhbHVlcy5tYXAocmVnaW9uID0+IHJlZ2lvbi5kZXZpYXRpb24pKVxuXHRcdFx0cmVnaW9uVmFsdWVzW21pbkRldmlhdGlvbkluZGV4XS5idWxsZXRzICs9IDFcblxuXHRcdFx0Y2FsY3VsYXRlU3RhdHMoKVxuXHRcdH1cblxuXHRcdHJldHVybiB7cmVnaW9uczogcmVnaW9uc31cblx0fVxufSJdfQ==